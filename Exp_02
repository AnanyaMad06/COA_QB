#include <stdio.h>
#include <string.h>

#define SIZE 8

void decToBinary(int n, char* binaryStr) {
    int i;
    for (i = SIZE - 1; i >= 0; i--) {
        binaryStr[i] = (n % 2) + '0';
        n /= 2;
    }
    binaryStr[SIZE] = '\0';
}

void onesComplement(char* binaryStr, char* onesCompStr) {
    int i;
    for (i = 0; i < SIZE; i++) {
        if (binaryStr[i] == '0') {
            onesCompStr[i] = '1';
        } else {
            onesCompStr[i] = '0';
        }
    }
    onesCompStr[SIZE] = '\0';
}

void twosComplement(char* onesCompStr, char* twosCompStr) {
    int i, carry = 1;
    for (i = SIZE - 1; i >= 0; i--) {
        if (onesCompStr[i] == '1' && carry == 1) {
            twosCompStr[i] = '0';
        } else if (onesCompStr[i] == '0' && carry == 1) {
            twosCompStr[i] = '1';
            carry = 0;
        } else {
            twosCompStr[i] = onesCompStr[i];
        }
    }
    twosCompStr[SIZE] = '\0';
}

int main() {
    int decimalNum;
    char binary[SIZE + 1];
    char onesComp[SIZE + 1];
    char twosComp[SIZE + 1];

    printf("Enter a decimal number (for an 8-bit representation): ");
    scanf("%d", &decimalNum);

    int tempDecimal = (decimalNum < 0) ? -decimalNum : decimalNum;

    decToBinary(tempDecimal, binary);
    onesComplement(binary, onesComp);
    twosComplement(onesComp, twosComp);

    printf("\nOriginal decimal: %d\n", decimalNum);
    printf("Binary representation (absolute value): %s\n", binary);

    if (decimalNum >= 0) {
        printf("One's complement: %s\n", binary);
        printf("Two's complement: %s\n", binary);
    } else {
        printf("One's complement: %s\n", onesComp);
        printf("Two's complement: %s\n", twosComp);
    }

    return 0;
}
