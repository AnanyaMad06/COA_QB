#include <stdio.h>
#include <math.h>

#define SIZE 8  // Number of bits

// Function to perform left shift on A and Q
void leftShift(int A[], int Q[], int *Q_1) {
    for (int i = 0; i < SIZE - 1; i++) {
        A[i] = A[i + 1];
    }
    A[SIZE - 1] = Q[0];

    for (int i = 0; i < SIZE - 1; i++) {
        Q[i] = Q[i + 1];
    }
    Q[SIZE - 1] = *Q_1;

    *Q_1 = 0;
}

// Function to add two binary arrays
void binaryAdd(int A[], int M[]) {
    int carry = 0;
    for (int i = SIZE - 1; i >= 0; i--) {
        int sum = A[i] + M[i] + carry;
        A[i] = sum % 2;
        carry = sum / 2;
    }
}

// Function to subtract M from A (A = A - M)
void binarySub(int A[], int M[]) {
    int negM[SIZE];

    // Take 1's complement of M
    for (int i = 0; i < SIZE; i++) {
        negM[i] = (M[i] == 0) ? 1 : 0;
    }

    int one[SIZE] = {0};
    one[SIZE - 1] = 1;

    // Take 2's complement of M
    binaryAdd(negM, one);  // negM = -M
    binaryAdd(A, negM);    // A = A + (-M)
}

// Convert decimal to binary
void decToBin(int num, int bin[]) {
    for (int i = SIZE - 1; i >= 0; i--) {
        bin[i] = num % 2;
        num /= 2;
    }
}

// Convert binary to decimal
int binToDec(int bin[]) {
    int num = 0;
    for (int i = 0; i < SIZE; i++) {
        num += bin[i] * pow(2, SIZE - 1 - i);
    }
    return num;
}

// Function to print binary array with label
void printBin(char *label, int bin[]) {
    printf("%s: ", label);
    for (int i = 0; i < SIZE; i++)
        printf("%d", bin[i]);
    printf("\n");
}

int main() {
    int A[SIZE] = {0};  // Accumulator
    int Q[SIZE];        // Dividend
    int M[SIZE];        // Divisor
    int Q_1 = 0;        // Extra bit

    int dividend, divisor;

    printf("Enter Dividend: ");
    scanf("%d", &dividend);

    printf("Enter Divisor: ");
    scanf("%d", &divisor);

    decToBin(dividend, Q);
    decToBin(divisor, M);

    printf("\nInitial Values:\n");
    printBin("A", A);
    printBin("Q", Q);
    printBin("M", M);

    printf("\nRestoring Division Steps:\n");

    for (int i = 0; i < SIZE; i++) {
        printf("\nStep %d:\n", i + 1);

        // Left Shift A and Q
        leftShift(A, Q, &Q_1);
        printBin("After Shift A", A);
        printBin("After Shift Q", Q);

        // A = A - M
        binarySub(A, M);
        printBin("After A - M", A);

        // Check sign of A (MSB)
        if (A[0] == 1) {
            Q[SIZE - 1] = 0;  // Set Q0 = 0
            binaryAdd(A, M);  // Restore A
            printBin("A restored", A);
        } else {
            Q[SIZE - 1] = 1;  // Set Q0 = 1
        }

        printBin("Updated Q", Q);
    }

    printf("\nFinal Result:\n");
    printBin("Quotient (Q)", Q);
    printBin("Remainder (A)", A);

    printf("\nDecimal Result:\n");
    printf("Quotient: %d\n", binToDec(Q));
    printf("Remainder: %d\n", binToDec(A));

    return 0;
}
